// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package external

import (
	"sync"
)

// StatusProviderMock is a mock implementation of StatusProvider.
//
//	func TestSomethingThatUsesStatusProvider(t *testing.T) {
//
//		// make and configure a mocked StatusProvider
//		mockedStatusProvider := &StatusProviderMock{
//			StatusFunc: func(req Request) (*Response, error) {
//				panic("mock out the Status method")
//			},
//		}
//
//		// use mockedStatusProvider in code that requires StatusProvider
//		// and then make assertions.
//
//	}
type StatusProviderMock struct {
	// StatusFunc mocks the Status method.
	StatusFunc func(req Request) (*Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Status holds details about calls to the Status method.
		Status []struct {
			// Req is the req argument value.
			Req Request
		}
	}
	lockStatus sync.RWMutex
}

// Status calls StatusFunc.
func (mock *StatusProviderMock) Status(req Request) (*Response, error) {
	if mock.StatusFunc == nil {
		panic("StatusProviderMock.StatusFunc: method is nil but StatusProvider.Status was just called")
	}
	callInfo := struct {
		Req Request
	}{
		Req: req,
	}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc(req)
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//
//	len(mockedStatusProvider.StatusCalls())
func (mock *StatusProviderMock) StatusCalls() []struct {
	Req Request
} {
	var calls []struct {
		Req Request
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}
